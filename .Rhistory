axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip()
ggplot(df_plot1, aes(reorder(Tag, Tag_count),Tag_count)) + geom_bar(stat = "identity",fill = "indianred3",alpha = 0.8) + theme_minimal() +xlab("Tag-class") +
ylab("Number of Tags")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip()
ggplot(df_plot1, aes(reorder(Tag, Tag_count),Tag_count)) + geom_bar(stat = "identity",fill = "indianred3",alpha = 0.8) + theme_minimal() +xlab("Tag-class") +
ylab("Number of Tags")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Tags counts")
ggplot(df_plot1, aes(reorder(Tag, Tag_count),Tag_count)) + geom_bar(stat = "identity",fill = "indianred3",alpha = 0.8) + theme_minimal() +xlab("Tag-class") +
ylab("Number of Tags")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of Tags")
ggplot(df_sub,aes(Tag,Sentence_num))+geom_boxplot( fill="steelblue") + theme_minimal() +xlab("Tag-class") +
ylab("Sentence number") +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))
ggplot(df_sub,aes(Tag,Sentence_num))+geom_boxplot( fill="steelblue") + theme_minimal() +xlab("Tag-class") +
ylab("Sentence number") +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15)) + ggtitle("Sentence position of Tags")
ggplot(df_sub, aes(Tag, ..count..)) + geom_bar(aes(fill = POS), stat = "identity")
df_plot2 <- df_sub %>% group_by(Tag,POS) %>%summarise(Tag_count=n())
View(df_plot2)
ggplot(df_sub, aes(Tag, Tag_count)) + geom_bar(aes(fill = POS), stat = "identity")
ggplot(df_plot2, aes(Tag, Tag_count)) + geom_bar(aes(fill = POS), stat = "identity")
ggplot(df_plot2, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity")
ggplot(df_plot2) + geom_bar(aes(Tag, Tag_count,fill = POS),stat = "identity")
ggplot(df_plot2, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")
ggplot(df_plot2, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = "set1")
ggplot(df_plot2, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = "Set1")
ggplot(df_plot2, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = 1)
ggplot(df_plot2, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = 12)
ggplot(df_plot1, aes(reorder(Tag, Tag_count),Tag_count)) + geom_bar(stat = "identity",fill = "indianred3",alpha = 0.8) + theme_minimal() +xlab("Tag-class") +
ylab("Number of Tags")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of Tags")
df_plot2 <- df_sub %>% group_by(POS) %>%summarise(POS_count=n())
ggplot(df_plot2, aes(reorder(POS, POS_count),POS_count)) + geom_bar(stat = "identity",fill = "indianred3",alpha = 0.8) + theme_minimal() +xlab("POS-class") +
ylab("Number of POSs")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of POSs")
View(df_plot2)
df_plot2 <- df_plot2[-which(df_plot2$POS_count<30),]
ggplot(df_plot2, aes(reorder(POS, POS_count),POS_count)) + geom_bar(stat = "identity",fill = "indianred3",alpha = 0.8) + theme_minimal() +xlab("POS-class") +
ylab("Number of POSs")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of POSs")
ggplot(df_plot2, aes(reorder(POS, POS_count),POS_count)) + geom_bar(stat = "identity",fill = "orange2",alpha = 0.8) + theme_minimal() +xlab("POS-class") +
ylab("Number of POSs")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of POSs")
ggplot(df_plot2, aes(reorder(POS, POS_count),POS_count)) + geom_bar(stat = "identity",fill = "orange3",alpha = 0.8) + theme_minimal() +xlab("POS-class") +
ylab("Number of POSs")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of POSs")
df_plot2 <- df_sub %>% group_by(POS) %>%summarise(POS_count=n())
df_plot2 <- df_plot2[-which(df_plot2$POS_count<100),]
ggplot(df_plot2, aes(reorder(POS, POS_count),POS_count)) + geom_bar(stat = "identity",fill = "orange3",alpha = 0.8) + theme_minimal() +xlab("POS-class") +
ylab("Number of POSs")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of POSs")
ggplot(df_sub,aes(Tag,Sentence_num))+geom_boxplot( fill="steelblue") + theme_minimal() +xlab("Tag-class") +
ylab("Sentence number") +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15)) + ggtitle("Sentence position of Tags")
df_plot2 <- df_sub %>% group_by(Tag,POS) %>%summarise(Tag_count=n())
df_plot2$POS
df_plot2 <- df_plot2[-which(df_plot2$POS_count<100),]
df_plot2 <- df_sub %>% group_by(POS) %>%summarise(POS_count=n())
df_plot2 <- df_plot2[-which(df_plot2$POS_count<100),]
df_plot2$POS
df_plot3 <- df_sub %>% group_by(Tag,POS) %>%summarise(Tag_count=n())
df_plot3 <- df_plot3[which(df_plot3$POS == "CD"|df_plot3$POS == "IN"|df_plot3$POS == "JJ"|df_plot3$POS == "NN"|df_plot3$POS == "NNP"|df_plot3$POS == "NNPS"|df_plot3$POS == "NNS"),]
ggplot(df_plot3, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = 12)
ggplot(df_plot3, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = "Set1")
ggplot(df_plot3, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = "Set1")++ theme_minimal() +xlab("Tag-class") +
ylab("Frequency of POS") +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15)) + ggtitle("Frequency of POS for Tags")
ggplot(df_plot3, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = "Set1")+ theme_minimal() +xlab("Tag-class") +
ylab("Frequency of POS") +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15)) + ggtitle("Frequency of POS for Tags")
ggplot(df_plot3, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = "Set1")+ theme_minimal() +xlab("Tag-class") +
ylab("Frequency of POS") +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15)) + ggtitle("Frequency of POS for Tags")
ggplot(df_plot1, aes(reorder(Tag, Tag_count),Tag_count)) + geom_bar(stat = "identity",fill = "indianred3",alpha = 0.8) + theme_minimal() +xlab("Tag-class") +
ylab("Number of Tags")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of Tags")
df_plot2 <- df_sub %>% group_by(POS) %>%summarise(POS_count=n())
df_plot2 <- df_plot2[-which(df_plot2$POS_count<100),]
ggplot(df_plot2, aes(reorder(POS, POS_count),POS_count)) + geom_bar(stat = "identity",fill = "orange3",alpha = 0.8) + theme_minimal() +xlab("POS-class") +
ylab("Number of POSs")+theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15))+coord_flip() + ggtitle("Frequency of POSs (Top 7 POS)")
ggplot(df_sub,aes(Tag,Sentence_num))+geom_boxplot( fill="steelblue") + theme_minimal() +xlab("Tag-class") +
ylab("Sentence number") +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15)) + ggtitle("Sentence position of Tags")
df_plot3 <- df_sub %>% group_by(Tag,POS) %>%summarise(Tag_count=n())
df_plot3 <- df_plot3[which(df_plot3$POS == "CD"|df_plot3$POS == "IN"|df_plot3$POS == "JJ"|df_plot3$POS == "NN"|df_plot3$POS == "NNP"|df_plot3$POS == "NNPS"|df_plot3$POS == "NNS"),]
ggplot(df_plot3, aes(Tag, Tag_count,fill = POS)) + geom_bar(stat = "identity",position = "fill")+scale_fill_brewer(palette = "Set1")+ theme_minimal() +xlab("Tag-class") +
ylab("Frequency of POS") +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),axis.text.x = element_text(size = 15,angle = 45),axis.text.y = element_text(size = 15)) + ggtitle("Frequency of POS for Tags")
table(df$Tag)
View(df)
table(df$POS)
# Load the pred probability from XGBoost model
result_df <- NULL
B_art <- read.csv("pred_result_B-art.csv")
result_df$B_art_p <- B_art$pred
result_df$B_art_cp <- B_art$pred_cal
I_gpe <- read.csv("pred_result_I-gpe.csv")
result_df$I_gpe_p <- I_gpe$pred
result_df$I_gpe_cp <- I_gpe$pred_cal
I_nat <- read.csv("pred_result_I-nat.csv")
result_df$I_nat_p <- I_nat$pred
result_df$I_nat_cp <- I_nat$pred_cal
I_org <- read.csv("pred_result_I-org.csv")
result_df$I_org_p <- I_org$pred
result_df$I_org_cp <- I_org$pred_cal
I_art <- read.csv("pred_result_I-art.csv")
result_df$I_art_p <- I_art$pred
result_df$I_art_cp <- I_art$pred_cal
I_per <- read.csv("pred_result_I-per.csv")
result_df$I_per_p <- I_per$pred
result_df$I_per_cp <- I_per$pred_cal
I_geo <- read.csv("pred_result_I-geo.csv")
result_df$I_geo_p <- I_geo$pred
result_df$I_geo_cp <- I_geo$pred_cal
B_nat <- read.csv("pred_result_B-nat.csv")
result_df$B_nat_p <- B_nat$pred
result_df$B_nat_cp <- B_nat$pred_cal
B_geo <- read.csv("pred_result_B-geo.csv")
result_df$B_geo_p <- B_geo$pred
result_df$B_geo_cp <- B_geo$pred_cal
B_gpe <- read.csv("pred_result_B-gpe.csv")
result_df$B_gpe_p <- B_gpe$pred
result_df$B_gpe_cp <- B_gpe$pred_cal
B_eve <- read.csv("pred_result_B-eve.csv")
result_df$B_eve_p <- B_eve$pred
result_df$B_eve_cp <- B_eve$pred_cal
B_org <- read.csv("pred_result_B-org.csv")
result_df$B_org_p <- B_org$pred
result_df$B_org_cp <- B_org$pred_cal
B_per <- read.csv("pred_result_B-per.csv")
result_df$B_per_p <- B_per$pred
result_df$B_per_cp <- B_per$pred_cal
I_tim <- read.csv("pred_result_I-tim.csv")
result_df$I_tim_p <- I_tim$pred
result_df$I_tim_cp <- I_tim$pred_cal
B_tim <- read.csv("pred_result_B-tim.csv")
result_df$B_tim_p <- B_tim$pred
result_df$B_tim_cp <- B_tim$pred_cal
I_eve <- read.csv("pred_result_I-eve.csv")
result_df$I_eve_p <- I_eve$pred
result_df$I_eve_cp <- I_eve$pred_cal
df_result <- as.data.frame(result_df)
df_result_p <- df_result[,seq(1,31,2)]
df_result_cp <- df_result[,seq(2,32,2)]
test_data <- read.csv("test_data.csv")
library(ggplot2)
library(corrplot)
library(ROCR)
library(caret)
# Model evaluation
extract_evaluation <- function(tagName,colname,test_data,result_data)
{
xgb_pred <- result_data[colname]
test_Y <- test_data$Tag
test_Y <- ifelse(test_Y == tagName,1,0)
ROCRpred_xgb <- prediction(xgb_pred, test_Y)
perf_xgb <- performance(ROCRpred_xgb, 'tpr','fpr')
roc_xgb.data <- data.frame(fpr=unlist(perf_xgb@x.values),
tpr=unlist(perf_xgb@y.values))
return(roc_xgb.data)
}
colnames(df_result_p)
roc_xgb.data.B_art_p <- extract_evaluation(tagName = "B-art",colname = "B_art_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_gpe_p <- extract_evaluation(tagName = "I-gpe",colname = "I_gpe_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_nat_p <- extract_evaluation(tagName = "I-nat",colname = "I_nat_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_org_p <- extract_evaluation(tagName = "I-org",colname = "I_org_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_art_p <- extract_evaluation(tagName = "I-art",colname = "I_art_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_per_p <- extract_evaluation(tagName = "I-per",colname = "I_per_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_geo_p <- extract_evaluation(tagName = "I-geo",colname = "I_geo_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.B_nat_p <- extract_evaluation(tagName = "B-nat",colname = "B_nat_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.B_geo_p <- extract_evaluation(tagName = "B-geo",colname = "B_geo_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.B_gpe_p <- extract_evaluation(tagName = "B-gpe",colname = "B_gpe_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.B_eve_p <- extract_evaluation(tagName = "B-eve",colname = "B_eve_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.B_org_p <- extract_evaluation(tagName = "B-org",colname = "B_org_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.B_per_p <- extract_evaluation(tagName = "B-per",colname = "B_per_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_tim_p <- extract_evaluation(tagName = "I-tim",colname = "I_tim_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.B_tim_p <- extract_evaluation(tagName = "B-tim",colname = "B_tim_p",test_data = test_data, result_data = df_result_p)
roc_xgb.data.I_eve_p <- extract_evaluation(tagName = "I-eve",colname = "I_eve_p",test_data = test_data, result_data = df_result_p)
cols <- c("b-art" = "antiquewhite4", "b-eve" = "cadetblue4", "b-geo" = "aquamarine4", "b-gpe" = "chartreuse3", "b-nat" = "chocolate3", "b-org" = "cornflowerblue", "b-per" = "brown3", "b-tim" = "darkgoldenrod3", "i-art" = "darkseagreen3", "i-eve" = "goldenrod3", "i-geo" = "gray", "i-gpe" = "deeppink3", "i-nat" = "lightsalmon", "i-org" = "limegreen", "i-per" = "magenta", "i-tim" = "navyblue")
# Creat roc curve for each class
proc <- ggplot() +
geom_line(data = roc_xgb.data.B_art_p, aes(x=fpr, y=tpr,colour = "b-art"),lwd = 1) +
geom_line(data = roc_xgb.data.B_eve_p, aes(x=fpr, y=tpr,colour = "b-eve"),lwd = 1) +
geom_line(data = roc_xgb.data.B_geo_p, aes(x=fpr, y=tpr,colour = "b-geo"),lwd = 1) +
geom_line(data = roc_xgb.data.B_gpe_p, aes(x=fpr, y=tpr,colour = "b-gpe"),lwd = 1) +
geom_line(data = roc_xgb.data.B_nat_p, aes(x=fpr, y=tpr,colour = "b-nat"),lwd = 1) +
geom_line(data = roc_xgb.data.B_org_p, aes(x=fpr, y=tpr,colour = "b-org"),lwd = 1) +
geom_line(data = roc_xgb.data.B_per_p, aes(x=fpr, y=tpr,colour = "b-per"),lwd = 1) +
geom_line(data = roc_xgb.data.B_tim_p, aes(x=fpr, y=tpr,colour = "b-tim"),lwd = 1) +
geom_line(data = roc_xgb.data.I_art_p, aes(x=fpr, y=tpr,colour = "i-art"),lwd = 1) +
geom_line(data = roc_xgb.data.I_eve_p, aes(x=fpr, y=tpr,colour = "i-eve"),lwd = 1) +
geom_line(data = roc_xgb.data.I_geo_p, aes(x=fpr, y=tpr,colour = "i-geo"),lwd = 1) +
geom_line(data = roc_xgb.data.I_gpe_p, aes(x=fpr, y=tpr,colour = "i-gpe"),lwd = 1) +
geom_line(data = roc_xgb.data.I_nat_p, aes(x=fpr, y=tpr,colour = "i-nat"),lwd = 1) +
geom_line(data = roc_xgb.data.I_org_p, aes(x=fpr, y=tpr,colour = "i-org"),lwd = 1) +
geom_line(data = roc_xgb.data.I_per_p, aes(x=fpr, y=tpr,colour = "i-per"),lwd = 1) +
geom_line(data = roc_xgb.data.I_tim_p, aes(x=fpr, y=tpr,colour = "i-tim"),lwd = 1) +
geom_vline(xintercept = 0.5, color = "red", linetype=2) + theme_bw() + #set themes
scale_colour_manual(name = "Labels", values = cols) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
proc
#### Draw confusion matrix
get_cutoff_point <- function(perf, threshold)
{
cutoffs <- data.frame(cut=perf@alpha.values[[1]], fpr=perf@x.values[[1]], tpr=perf@y.values[[1]])
cutoffs <- cutoffs[order(cutoffs$tpr, decreasing=TRUE),]
cutoffs <- subset(cutoffs, fpr <= threshold)
if(nrow(cutoffs) == 0){ return(1.0)}
else return(cutoffs[1, 1])
}
confusion_matrix <- function(cm, auc, color) {
layout(matrix(c(1,1,2)))
par(mar=c(0,0.1,1,0.1))
plot(c(125, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
# create the matrix
rect(150, 430, 240, 370, col=color)
text(195, 435, '0', cex=1.2)
rect(250, 430, 340, 370, col='white')
text(295, 435, '1', cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='white')
rect(250, 305, 340, 365, col=color)
text(140, 400, '0', cex=1.2, srt=90)
text(140, 335, '1', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='black')
text(295, 400, res[3], cex=1.6, font=2, col='black')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(0, 100), c(0, 50), type = "n", xlab="", ylab="", main = "", xaxt='n', yaxt='n')
# add in the accuracy information
text(25, 30, "AUC", cex=1.8, font=2)
text(25, 20, round(as.numeric(auc), 3), cex=1.8)
text(75, 30, names(cm$overall[1]), cex=1.8, font=2)
text(75, 20, round(as.numeric(cm$overall[1]), 3), cex=1.8)
}
draw_confusion_matrix <- function(tagName,colname,test_data,result_data,thresh,color)
{
xgb_pred <- result_data[colname]
test_Y <- test_data$Tag
test_Y <- ifelse(test_Y == tagName,1,0)
ROCRpred_xgb <- prediction(xgb_pred, test_Y)
auc_xgb <- performance(ROCRpred_xgb, measure = "auc")
perf_xgb <- performance(ROCRpred_xgb, 'tpr','fpr')
cut <- get_cutoff_point(perf_xgb, thresh)
pred_values_xgb <- ifelse(xgb_pred > cut,1,0)
cm_xgb <- confusionMatrix(data = pred_values_xgb, reference = test_Y)
confusion_matrix(cm_xgb, auc_xgb@y.values, color)
}
0.1/0.75
0.1/0.75/0.75
(1 - 0.1/0.75)/0.75
7.5 * 0.13333
6.5/7.5
draw_confusion_matrix(tagName = "B-art",colname = "B_art_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "antiquewhite4")
draw_confusion_matrix(tagName = "I-gpe",colname = "I_gpe_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "deeppink3")
draw_confusion_matrix(tagName = "I-nat",colname = "I_nat_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "lightsalmon")
draw_confusion_matrix(tagName = "I-org",colname = "I_org_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "limegreen")
draw_confusion_matrix(tagName = "I-art",colname = "I_art_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "darkseagreen3")
draw_confusion_matrix(tagName = "I-per",colname = "I_per_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "magenta")
draw_confusion_matrix(tagName = "I-geo",colname = "I_geo_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "gray")
draw_confusion_matrix(tagName = "B-geo",colname = "B_geo_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "aquamarine4")
draw_confusion_matrix(tagName = "B-gpe",colname = "B_gpe_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "chartreuse3")
draw_confusion_matrix(tagName = "B-eve",colname = "B_eve_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "cadetblue4")
draw_confusion_matrix(tagName = "B-org",colname = "B_org_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "cornflowerblue")
draw_confusion_matrix(tagName = "B-per",colname = "B_per_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "brown3")
draw_confusion_matrix(tagName = "I-tim",colname = "I_tim_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "navyblue")
draw_confusion_matrix(tagName = "B-tim",colname = "B_tim_p",test_data = test_data, result_data = df_result_p,thresh = 0.2,color = "darkgoldenrod3")
draw_confusion_matrix(tagName = "B-tim",colname = "B_tim_p",test_data = test_data, result_data = df_result_p,thresh = 1.0,color = "darkgoldenrod3")
draw_confusion_matrix(tagName = "I-eve",colname = "I_eve_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "goldenrod3")
draw_confusion_matrix(tagName = "B-art",colname = "B_art_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "antiquewhite4")
draw_confusion_matrix(tagName = "I-gpe",colname = "I_gpe_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "deeppink3")
draw_confusion_matrix(tagName = "I-nat",colname = "I_nat_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "lightsalmon")
draw_confusion_matrix(tagName = "I-org",colname = "I_org_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "limegreen")
draw_confusion_matrix(tagName = "I-art",colname = "I_art_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "darkseagreen3")
draw_confusion_matrix(tagName = "I-per",colname = "I_per_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "magenta")
draw_confusion_matrix(tagName = "I-geo",colname = "I_geo_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "gray")
draw_confusion_matrix(tagName = "B-geo",colname = "B_geo_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "aquamarine4")
draw_confusion_matrix(tagName = "B-gpe",colname = "B_gpe_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "chartreuse3")
draw_confusion_matrix(tagName = "B-gpe",colname = "B_gpe_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "chartreuse3")
draw_confusion_matrix(tagName = "B-eve",colname = "B_eve_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "cadetblue4")
draw_confusion_matrix(tagName = "B-org",colname = "B_org_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "cornflowerblue")
draw_confusion_matrix(tagName = "I-tim",colname = "I_tim_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "navyblue")
draw_confusion_matrix(tagName = "B-tim",colname = "B_tim_p",test_data = test_data, result_data = df_result_p,thresh = 1.0,color = "darkgoldenrod3")
draw_confusion_matrix(tagName = "I-eve",colname = "I_eve_p",test_data = test_data, result_data = df_result_p,thresh = 1,color = "goldenrod3")
precision_curve <- function(tagName,colname,test_data,result_data)
{
xgb_pred <- result_data[colname]
test_Y <- test_data$Tag
test_Y <- ifelse(test_Y == tagName,1,0)
ROCRpred_xgb <- prediction(xgb_pred, test_Y)
perf_xgb <- performance(ROCRpred_xgb,'prec', 'cutoff') #use 'prec' and 'cutoff' as measurements
xgb.data <- data.frame(x=unlist(perf_xgb@x.values), y=unlist(perf_xgb@y.values))
return(xgb.data)
}
prec_xgb.data.B_art_p <- precision_curve(tagName = "B-art",colname = "B_art_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_gpe_p <- precision_curve(tagName = "I-gpe",colname = "I_gpe_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_nat_p <- precision_curve(tagName = "I-nat",colname = "I_nat_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_org_p <- precision_curve(tagName = "I-org",colname = "I_org_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_art_p <- precision_curve(tagName = "I-art",colname = "I_art_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_per_p <- precision_curve(tagName = "I-per",colname = "I_per_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_geo_p <- precision_curve(tagName = "I-geo",colname = "I_geo_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.B_nat_p <- precision_curve(tagName = "B-nat",colname = "B_nat_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.B_geo_p <- precision_curve(tagName = "B-geo",colname = "B_geo_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.B_gpe_p <- precision_curve(tagName = "B-gpe",colname = "B_gpe_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.B_eve_p <- precision_curve(tagName = "B-eve",colname = "B_eve_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.B_org_p <- precision_curve(tagName = "B-org",colname = "B_org_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.B_per_p <- precision_curve(tagName = "B-per",colname = "B_per_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_tim_p <- precision_curve(tagName = "I-tim",colname = "I_tim_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.B_tim_p <- precision_curve(tagName = "B-tim",colname = "B_tim_p",test_data = test_data, result_data = df_result_p)
prec_xgb.data.I_eve_p <- precision_curve(tagName = "I-eve",colname = "I_eve_p",test_data = test_data, result_data = df_result_p)
prec <- ggplot() +
geom_line(data = prec_xgb.data.B_art_p, aes(x=x, y=y,colour = "b-art"),lwd = 1) +
geom_line(data = prec_xgb.data.B_eve_p, aes(x=x, y=y,colour = "b-eve"),lwd = 1) +
geom_line(data = prec_xgb.data.B_geo_p, aes(x=x, y=y,colour = "b-geo"),lwd = 1) +
geom_line(data = prec_xgb.data.B_gpe_p, aes(x=x, y=y,colour = "b-gpe"),lwd = 1) +
geom_line(data = prec_xgb.data.B_nat_p, aes(x=x, y=y,colour = "b-nat"),lwd = 1) +
geom_line(data = prec_xgb.data.B_org_p, aes(x=x, y=y,colour = "b-org"),lwd = 1) +
geom_line(data = prec_xgb.data.B_per_p, aes(x=x, y=y,colour = "b-per"),lwd = 1) +
geom_line(data = prec_xgb.data.B_tim_p, aes(x=x, y=y,colour = "b-tim"),lwd = 1) +
geom_line(data = prec_xgb.data.I_art_p, aes(x=x, y=y,colour = "i-art"),lwd = 1) +
geom_line(data = prec_xgb.data.I_eve_p, aes(x=x, y=y,colour = "i-eve"),lwd = 1) +
geom_line(data = prec_xgb.data.I_geo_p, aes(x=x, y=y,colour = "i-geo"),lwd = 1) +
geom_line(data = prec_xgb.data.I_gpe_p, aes(x=x, y=y,colour = "i-gpe"),lwd = 1) +
geom_line(data = prec_xgb.data.I_nat_p, aes(x=x, y=y,colour = "i-nat"),lwd = 1) +
geom_line(data = prec_xgb.data.I_org_p, aes(x=x, y=y,colour = "i-org"),lwd = 1) +
geom_line(data = prec_xgb.data.I_per_p, aes(x=x, y=y,colour = "i-per"),lwd = 1) +
geom_line(data = prec_xgb.data.I_tim_p, aes(x=x, y=y,colour = "i-tim"),lwd = 1) +
xlab("Cutoff") +
ylab("Precision") +
geom_vline(xintercept = 0.5, color = "red", linetype=2) + theme_bw() +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
prec
recall_curve <- function(tagName,colname,test_data,result_data)
{
xgb_pred <- result_data[colname]
test_Y <- test_data$Tag
test_Y <- ifelse(test_Y == tagName,1,0)
ROCRpred_xgb <- prediction(xgb_pred, test_Y)
perf_xgb <- performance(ROCRpred_xgb,'rec', 'cutoff')
xgb.data <- data.frame(x=unlist(perf_xgb@x.values), y=unlist(perf_xgb@y.values))
return(xgb.data)
}
rec_xgb.data.B_art_p <- recall_curve(tagName = "B-art",colname = "B_art_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_gpe_p <- recall_curve(tagName = "I-gpe",colname = "I_gpe_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_org_p <- recall_curve(tagName = "I-org",colname = "I_org_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_art_p <- recall_curve(tagName = "I-art",colname = "I_art_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_nat_p <- recall_curve(tagName = "I-nat",colname = "I_nat_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_per_p <- recall_curve(tagName = "I-per",colname = "I_per_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_geo_p <- recall_curve(tagName = "I-geo",colname = "I_geo_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.B_nat_p <- recall_curve(tagName = "B-nat",colname = "B_nat_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.B_geo_p <- recall_curve(tagName = "B-geo",colname = "B_geo_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.B_gpe_p <- recall_curve(tagName = "B-gpe",colname = "B_gpe_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.B_eve_p <- recall_curve(tagName = "B-eve",colname = "B_eve_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.B_org_p <- recall_curve(tagName = "B-org",colname = "B_org_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.B_per_p <- recall_curve(tagName = "B-per",colname = "B_per_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_tim_p <- recall_curve(tagName = "I-tim",colname = "I_tim_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.B_tim_p <- recall_curve(tagName = "B-tim",colname = "B_tim_p",test_data = test_data, result_data = df_result_p)
rec_xgb.data.I_eve_p <- recall_curve(tagName = "I-eve",colname = "I_eve_p",test_data = test_data, result_data = df_result_p)
rec <- ggplot() +
geom_line(data = rec_xgb.data.B_art_p, aes(x=x, y=y,colour = "b-art"),lwd = 1) +
geom_line(data = rec_xgb.data.B_eve_p, aes(x=x, y=y,colour = "b-eve"),lwd = 1) +
geom_line(data = rec_xgb.data.B_geo_p, aes(x=x, y=y,colour = "b-geo"),lwd = 1) +
geom_line(data = rec_xgb.data.B_gpe_p, aes(x=x, y=y,colour = "b-gpe"),lwd = 1) +
geom_line(data = rec_xgb.data.B_nat_p, aes(x=x, y=y,colour = "b-nat"),lwd = 1) +
geom_line(data = rec_xgb.data.B_org_p, aes(x=x, y=y,colour = "b-org"),lwd = 1) +
geom_line(data = rec_xgb.data.B_per_p, aes(x=x, y=y,colour = "b-per"),lwd = 1) +
geom_line(data = rec_xgb.data.B_tim_p, aes(x=x, y=y,colour = "b-tim"),lwd = 1) +
geom_line(data = rec_xgb.data.I_art_p, aes(x=x, y=y,colour = "i-art"),lwd = 1) +
geom_line(data = rec_xgb.data.I_eve_p, aes(x=x, y=y,colour = "i-eve"),lwd = 1) +
geom_line(data = rec_xgb.data.I_geo_p, aes(x=x, y=y,colour = "i-geo"),lwd = 1) +
geom_line(data = rec_xgb.data.I_gpe_p, aes(x=x, y=y,colour = "i-gpe"),lwd = 1) +
geom_line(data = rec_xgb.data.I_nat_p, aes(x=x, y=y,colour = "i-nat"),lwd = 1) +
geom_line(data = rec_xgb.data.I_org_p, aes(x=x, y=y,colour = "i-org"),lwd = 1) +
geom_line(data = rec_xgb.data.I_per_p, aes(x=x, y=y,colour = "i-per"),lwd = 1) +
geom_line(data = rec_xgb.data.I_tim_p, aes(x=x, y=y,colour = "i-tim"),lwd = 1) +
xlab("Cutoff") +
ylab("Recall") +
geom_vline(xintercept = 0.5, color = "red", linetype=2) + theme_bw() +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
rec
xgb.data
prec_xgb.data.B_art_p
View(prec_xgb.data.B_art_p)
?performance
View(I_tim)
prec <- ggplot() +
geom_line(data = prec_xgb.data.I_tim_p, aes(x=x, y=y,colour = "i-tim"),lwd = 1) +
xlab("Cutoff") +
ylab("Precision") +
geom_vline(xintercept = 0.5, color = "red", linetype=2) + theme_bw() +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
prec
test_Y <- test_data$Tag
test_Y <- ifelse(test_Y == "I-tim",1,0)
table(test_Y)
35/6600
test_Y <- test_data$Tag
test_Y <- ifelse(test_Y == "I-geo",1,0)
table(test_Y)
prec <- ggplot() + xlim(0,1)+
geom_line(data = prec_xgb.data.B_art_p, aes(x=x, y=y,colour = "b-art"),lwd = 1) +
geom_line(data = prec_xgb.data.B_eve_p, aes(x=x, y=y,colour = "b-eve"),lwd = 1) +
geom_line(data = prec_xgb.data.B_geo_p, aes(x=x, y=y,colour = "b-geo"),lwd = 1) +
geom_line(data = prec_xgb.data.B_gpe_p, aes(x=x, y=y,colour = "b-gpe"),lwd = 1) +
geom_line(data = prec_xgb.data.B_nat_p, aes(x=x, y=y,colour = "b-nat"),lwd = 1) +
geom_line(data = prec_xgb.data.B_org_p, aes(x=x, y=y,colour = "b-org"),lwd = 1) +
geom_line(data = prec_xgb.data.B_per_p, aes(x=x, y=y,colour = "b-per"),lwd = 1) +
geom_line(data = prec_xgb.data.B_tim_p, aes(x=x, y=y,colour = "b-tim"),lwd = 1) +
geom_line(data = prec_xgb.data.I_art_p, aes(x=x, y=y,colour = "i-art"),lwd = 1) +
geom_line(data = prec_xgb.data.I_eve_p, aes(x=x, y=y,colour = "i-eve"),lwd = 1) +
geom_line(data = prec_xgb.data.I_geo_p, aes(x=x, y=y,colour = "i-geo"),lwd = 1) +
geom_line(data = prec_xgb.data.I_gpe_p, aes(x=x, y=y,colour = "i-gpe"),lwd = 1) +
geom_line(data = prec_xgb.data.I_nat_p, aes(x=x, y=y,colour = "i-nat"),lwd = 1) +
geom_line(data = prec_xgb.data.I_org_p, aes(x=x, y=y,colour = "i-org"),lwd = 1) +
geom_line(data = prec_xgb.data.I_per_p, aes(x=x, y=y,colour = "i-per"),lwd = 1) +
geom_line(data = prec_xgb.data.I_tim_p, aes(x=x, y=y,colour = "i-tim"),lwd = 1) +
xlab("Cutoff") +
ylab("Precision") +
geom_vline(xintercept = 0.5, color = "red", linetype=2) + theme_bw() +
theme(legend.position = c(0.95, 0.5),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
prec
